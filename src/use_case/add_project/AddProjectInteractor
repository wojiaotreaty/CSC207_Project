package use_case.add_project;
import entity.Project;
import entity.ProjectFactory;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;

public class AddProjectInteractor implements AddProjectInputBoundary {
    final private AddProjectDataAccessInterface userDataAccessObject;
    final private AddProjectOutputBoundary userPresenter;
    final private ProjectFactory projectFactory;

    public AddProjectInteractor(AddProjectDataAccessInterface addProjectDataAccessInterface,
                            AddProjectOutputBoundary addProjectOutputBoundary, ProjectFactory projectFactory) {
        this.userDataAccessObject = addProjectDataAccessInterface;
        this.userPresenter = addProjectOutputBoundary;
        this.projectFactory =  projectFactory;
    }

    @Override
    public void execute(AddProjectInputData addProjectInputData) {

        String url = "https://api.openai.com/v1/chat/completions";
        String apiKey;

        try (BufferedReader br = new BufferedReader(new FileReader("../apikey.txt"))) {
            apiKey = br.readLine();
        } catch (IOException e) {
            userPresenter.prepareFailView("Failed to fetch API key: " + e.toString());
        }
        String model = "gpt-3.5-turbo";

        //A list of tasks. Each task is a list structured as follows: {Task Name, Task Desc, Task Deadline}
        ArrayList<ArrayList<String>> tasks = new ArrayList<ArrayList<String>>();
        StringBuilder tasksString = new StringBuilder();

        try {
            URL obj = new URI(url).toURL();
            HttpURLConnection connection = (HttpURLConnection) obj.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Authorization", "Bearer " + apiKey);
            connection.setRequestProperty("Content-Type", "application/json");

            // The request body
            String body = "{\"model\": \"" + model + "\", \"messages\": " +
                    "[{\"role\": \"user\", \"content\": \"Here are the details of a project I am working on: Project Title: " +
                    addProjectInputData.getProjectTitle() + ". Project Description: " + addProjectInputData.getProjectDetails() +
                    ". Project Deadline: " + addProjectInputData.getProjectDeadline() + ". Given this project, " +
                    "break it down into smaller subtasks. I want your response formatted EXACTLY in the following " +
                    "way: ;<insert task name>@ <insert brief task description>@ <insert task deadline as YYYY/MM/DD>; another task;" +
                    " .... Do not include an opening or closing sentence in your response.\"}]}";
            connection.setDoOutput(true);
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(body);
            writer.flush();
            writer.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;

            StringBuilder response = new StringBuilder();

            while ((line = br.readLine()) != null) {
                response.append(line);
            }
            br.close();

            String[] tasksArray = extractMessageFromJSONResponse(response.toString()).split(";", 0);

            for (String task : tasksArray) {
                String[] taskAttributes = task.split("@");
                ArrayList<String> taskList = new ArrayList<String>();
                taskList.add(taskAttributes[0]);
                tasksString.append(taskAttributes[0]).append('`');
                taskList.add(taskAttributes[1]);
                tasksString.append(taskAttributes[1]).append('`');
                taskList.add(taskAttributes[2]);
                tasksString.append(taskAttributes[0]).append("|uwu|");

                tasksString.append(tasks.add(taskList));
            }

        } catch (IOException | URISyntaxException e) {
            userPresenter.prepareFailView("Task generation failed: " + e.toString());
        }

        String projectID = userDataAccessObject.generateNewProjectId();
        Project project = new Project(
                projectID,
                addProjectInputData.getProjectTitle(),
                addProjectInputData.getProjectDetails(),
                tasks
                ) {
        };

        User user = userDataAccessObject.getUser(addProjectInputData.getUsername());
        user.addProject(project);
        userDataAccessObject.saveUser(user);

        AddProjectOutputData addProjectOutputData = new AddProjectOutputData(
                projectID,
                addProjectInputData.getProjectTitle(),
                addProjectInputData.getProjectDetails(),
                tasksString
                );
        userPresenter.prepareSuccessView(addProjectOutputData);

    }

    private String extractMessageFromJSONResponse(String response) {
        int start = response.indexOf("content")+ 11;

        int end = response.indexOf("\"", start);

        return response.substring(start, end);
    }
}